// npx prisma db push로 db에 push가능하며
//npx prisma studio로 쉽게 관리할 수 있다.

// 아래의 두 코드는 plantscale을 사용시 외래키가 제대로 동작할 수 있게하는 코드이다.
// previewFeatures = ["referentialIntegrity"]
//   referentialIntegrity = "prisma"

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

// @id는 모델에 단일 필드 id를 지정해준다.
// @updataeAt은 마지막으로 업데이트된 시간을 자동으로 저장한다.
model User {
  id        Int      @id @default(autoincrement())
  name      String
  phone     String?  @unique
  email     String?  @unique
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tokens    Token[]

}

// prisma의 경우 아래의 user는 DB의 테이블로 저장되지 않지만 token.user.name의 기능을 사용 가능하다
// onDelete: Cascade를 통해 유저가 삭제되면 토큰도 자동으로 삭제된다.

model Token {
  id        Int      @id @default(autoincrement())
  payload   String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
